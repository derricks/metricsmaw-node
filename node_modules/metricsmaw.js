/** Include module for metricsmaw */

var net = require('net')
  , events = require('events')
;

var SEND_METRIC_EVENT = 'sendMetric';

var initted = false;

var queue = null;

exports.init = function(host,port) {
    // singleton object, so just return on subsequent init
    // todo: throw an error?
    if (initted) return;
    
    queue = new MetricsQueue(host,port);
    var listener = new MetricsQueueListener(queue);
    initted = true;
};

exports.send = function(name,type,data,callback) {
    var errorString = "Metrics unavailable. Was init(host,port) called?";
    if (!queue && callback) {callback(new Error(errorString));return;}
    if (!queue && !callback) {console.log(errorString);return;}
    
    queue.sendMetric(name,type,data,callback);
}

function MetricsQueue(metricsHost,metricsPort) {
    this.metricsHost = metricsHost;
    this.metricsPort = metricsPort;
};

MetricsQueue.prototype = new events.EventEmitter();



/** Takes in a particular piece of data to send to the system. Callback gets an error.*/
MetricsQueue.prototype.sendMetric = function(name,type,data,callback) {
    if (callback) {
        if (!initted) callback(new Error("Call init before calling sendMetric"));
    } else {
        if (!initted) {
            console.log("Call init before calling sendMetric")
        } else {
            this.emit(SEND_METRIC_EVENT,name,type,data);  
            if(callback) callback(null);
        }
    }
};


function MetricsQueueListener(metricsQueue) {
   this.queue = metricsQueue;
   
   this.queue.on(SEND_METRIC_EVENT,
       function(name,type,data) {
          console.log("Metric " + name + " " + type + " " + data);
       }); 
};